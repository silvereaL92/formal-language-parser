{program,declaration,naturalNumber,type,compoundStatement,statement,simpleStatement,assignmentStatement,assignmentOperator,ioStatement,writeList,expression,term,factor,structuredStatement,ifStatement,whileStatement,condition,relation,item,itemList}
{{,},[,],;,int,char,=,+=,-=,*=,/=,read,write,(,),*,if,else,while,<,<=,==,>=,>,!=,+,identifier,constant}
program
program\;{ itemList }
itemList\;item
itemList\;item itemList
item\;statement
item\;declaration
declaration\;type identifier ;
declaration\;type identifier [ constant ] ;
declaration\;type identifier [ identifier ] ;
declaration\;type identifier = constant ;
type\;int
type\;char
compoundStatement\;{ statement }
statement\;simpleStatement
statement\;structuredStatement
simpleStatement\;assignmentStatement
simpleStatement\;ioStatement
assignmentStatement\;identifier assignmentOperator expression ;
assignmentOperator\;=
assignmentOperator\;/=
assignmentOperator\;-=
assignmentOperator\;*=
assignmentOperator\;+=
ioStatement\;read ( identifier ) ;
ioStatement\;read ( identifier [ identifier ] ) ;
ioStatement\;write ( writeList ) ;
writeList\;expression
writeList\;expression writeList
expression\;term + expression
expression\;term
term\;factor * term
term\;factor
factor\;( expression )
factor\;identifier
factor\;constant
factor\;identifier [ identifier ]
factor\;identifier [ constant ]
structuredStatement\;ifStatement
structuredStatement\;whileStatement
structuredStatement\;compoundStatement
ifStatement\;if ( condition ) item
ifStatement\;if ( condition ) { itemList }
ifStatement\;if ( condition ) item else item
ifStatement\;if ( condition ) { itemList } else item
ifStatement\;if ( condition ) { itemList } else { item }
ifStatement\;if ( condition ) item else { itemList }
whileStatement\;while ( condition ) item
whileStatement\;while ( condition ) { itemList }
condition\;expression relation expression
relation\;<
relation\;<=
relation\;==
relation\;>=
relation\;>
relation\;!=
